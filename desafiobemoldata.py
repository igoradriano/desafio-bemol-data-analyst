# -*- coding: utf-8 -*-
"""DesafioBemolData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16rIxLN6cNKwJPYDLQs0uQ6y5cajj-ryr

**DICIONÁRIO DE VARIÁVEIS**

**1) Dados - Questão 1**

*df_vendedores* - Data Frame (Dados - Questão 1) contendo dados a respeito de cada vendedor e informações sobre suas vendas.

*df_vendedores_qtd* - Data Frame contendo informacoes sobre quantidade de vendas de cada vendedor, total de vendas de cada vendedor, percentual da quantidade de vendas em relação ao total e percentual do total de vendas por vendedor em relação a todos os vendedores.

**2) Dados - Questão 2**

*df_lojas* - Data Frame (Dados - Questão 2) contendo dados a respeito das lojas Unidade Manaus 1 e Unidade Manaus 3

# **1. IMPORTANDO BIBLIOTECAS**

As bibliotecas utilizadas para visualizar os dados serão:

**Matplotlib**: é uma biblioteca utilizada para plotar os mais variados tipos de gráficos.

**Seaborn**: utiliza o Matplotlib como base e fornece funções simples de usar para criação de gráficos que seriam complexos apenas com o Matplotlib.

*Instalação:* pip install numpy pandas matplotlib seaborn.

A linha logo abaixo faz os gráficos aparecerem no Jupyter notebook, não é necessária caso não esteja utilizando ele.

%matplotlib inline
"""

#!pip install cufflinks
#!pip install plotly
#!pip install chart_studio
#!pip install xlsxwriter

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import os
import shutil

# Outras bibliotecas interessantes
import cufflinks as cf
from plotly.offline import iplot

#Criar diretório imagens caso o código ainda não tenha sido rodado, caso já exista
#excluir e criar um novo diretório com diretórios dados1 e dados2 dentro
if not os.path.exists('imagens'): 
  os.makedirs('imagens/dados1')
  os.makedirs('imagens/dados2')
else:
  shutil.rmtree('imagens') 

if not os.path.exists('imagens'):
  os.makedirs('imagens/dados1')
  os.makedirs('imagens/dados2')

"""# **2. FUNÇÕES IMPORTANTES**

## GRÁFICO DE PIZZA
"""

def grafico_pizza(df,ocorr,lab,x=2,explode=[],title='TITULO',diretorio='dados1'):
  fig = plt.figure(figsize=(8,7))
  ax1 = fig.add_subplot(111)
  ocorrencia = []
  labels = []
  for i in df.index: 
      if i > x:
        break
      else:
        ocorrencia.append(df[ocorr][i])
        labels.append(df[lab][i])
        

  if len(explode) == 0:
    for i in df.index:
      if i > x:
        break
      else:
        explode.append(i*0.05)
          

  cores = [ '#01a0e4','#d52d2b','#393ed3', 'yellow','black','gray','pink','brown']
  total = sum(ocorrencia)
  plt.pie(ocorrencia, explode=explode, labels=labels, colors=cores, autopct='%1.1f%%', shadow=True, startangle=90)

  # Com essa opção o gráfico ficará em círculo
  plt.axis('equal') 

  # Cria um título para o gráfico
  ax1.set_title(title, fontsize=15) 

  #legenda em posicao especifica
  ax1.legend(bbox_to_anchor=(1,0), loc="lower right", bbox_transform=fig.transFigure)
  
  #Fonte dos eixos
  plt.rcParams['xtick.labelsize'] = 16
  plt.rcParams['ytick.labelsize'] = 16
  #plt.rcParams['legend.fontsize'] = 16
  
  # Salvar grafico como imagem
  plt.savefig(f'imagens/{diretorio}/'+title +'.png')

  #Monstra o gráfico
  plt.show()

"""## GRÁFICO EM BARRAS"""

def grafico_barras_empilhadas(df, coluna1, coluna2, nome_dados, legenda=[1,2],nome_eixo_x='eixo x',nome_eixo_y='eixo y',title='titulo'):
  x1 = []
  x2 = []
  x3 = []
  a = []
  for i in df.index: 
      if i > 5:
        break
      else:
        #cria os dados
        x1.append(df[coluna1][i])
        x2.append(df[coluna2][i])
        x3.append(df[nome_dados][i])
        a.append(df[coluna1][i]/(df[coluna1][i] + df[coluna2][i]) )

  #Define a Largura das barras
  barWidth = 0.25
      
  #cria a figura e o eixo
  fig = plt.figure(figsize=(8,7))
  ax1 = fig.add_subplot(111)

  #Definindo a posição das barras
  r1 = np.arange(len(x1))
  r2 = [x + barWidth for x in r1]

  #Criando as barras
  plt.bar(r1, x1, color='#01a0e4', width=barWidth, label= legenda[0])
  plt.bar(r2, x2, color='#d52d2b', width=barWidth, label=legenda[1])


  # Adicionando legendas as barras
  plt.xlabel(nome_eixo_x, fontsize=15)
  plt.xticks([r + barWidth for r in range(len(x1))],x3)
  plt.ylabel(nome_eixo_y, fontsize=15)
  plt.title(title,fontsize=15)

  #legenda em posicao especifica
  ax1.legend(bbox_to_anchor=(1,0), loc="lower right", bbox_transform=fig.transFigure)

  #Fonte dos eixos
  plt.rcParams['xtick.labelsize'] = 16
  plt.rcParams['ytick.labelsize'] = 16
  #plt.rcParams['legend.fontsize'] = 16

  # cria o segundo eixo
  ax2 = ax1.twinx() 
  ax2.set_ylabel('Média', color='g', fontsize=15) #cria o rótula do segundo eixo
  ax2.plot(a, color='g')
  ax2.tick_params(axis='y', labelcolor='g')

  # Salvar grafico como imagem
  plt.savefig('imagens/dados1/'+title +'.png')

  plt.show()

"""## EXTRAIR VENDEDOR OU PRODUTO QUE MAIS VENDERAM/FORAM VENDIDOS POR FILIAL"""

def vp_filial(filiais, list_qtd_v_vendedores, col):
  todas_filiais_v = {}
  for filial in filiais:
    for linha in list_qtd_v_vendedores:
      if linha[0] == filial:
        if 'maior' in locals():
          if linha[col] > maior:
            maior = linha[col]
            vendedor = linha[2]
            cod_vendedor= linha[1]
        else:
          maior = linha[col]
          vendedor = linha[2]
          cod_vendedor= linha[1]
    todas_filiais_v[filial] = [maior,vendedor,cod_vendedor]
    maior = 0
  return todas_filiais_v

"""## HISTOGRAMA"""

def histograma_simples(df,coluna,min,max,passo,title,xlabel,ylabel,path):
  plt.figure(figsize=(8, 7))
  plt.hist(df[coluna], bins=range(min,max,passo))
  plt.title(title,size=18)
  plt.xlabel(xlabel)
  plt.ylabel(ylabel)
  plt.savefig(f'imagens/dados1/{path}.png')
  plt.plot()

"""# GRÁFICO DE LINHAS"""

def grafico_linhas(df, titulo='TITULO',xlabel="X",ylabel="Y"): 
  fig = plt.figure(figsize=(10,7))
  ax1 = fig.add_subplot(111)

  todasLinhas = df.values.tolist()
  x = df.columns.values
  x = x[1:6]
  for linha in todasLinhas:
    plt.plot(x,linha[1:6], label= linha[0] )
  #plt.ylim(0, 100000)  define o intervalo do eixo y
  #plt.yticks(np.linspace(0, 10, 500, endpoint=True)) # Define as marcas em y
  plt.title(titulo,fontsize=15)
  plt.xlabel(xlabel,fontsize=13)
  plt.ylabel(ylabel,fontsize=13)
  plt.legend()
  plt.show()

"""# **3. MANIPULAÇÃO DOS DADOS**

# **Importando Data Frame Vendedores (Questão 1)**
"""

df_vendedores = pd.read_excel('Desafio_2.0-Relatorio.xlsx', sheet_name = 'Dados - Questão 1' , skiprows = 0)
df_vendedores.head(5)

"""# **Importando Data Frame Lojas (Questão 2)**"""

df_lojas = pd.read_excel('Desafio_2.0-Relatorio.xlsx', sheet_name = 'Dados - Questão 2' , skiprows = 0 )
df_lojas.head(3)

"""# **4. TRATAMENTO DE DADOS**

## 4.1 Renomeando Colunas

### **Renomeando colunas do Data Frame Vendedores (Questão 1)**
"""

df_vendedores.columns = ['num_compra','usuario','nome','tipo_de_mercadoria','filial','data_compra','valor_compra','imposto','cpf_na_nota']
df_vendedores.head(3)

"""### **Renomeando colunas do Data Frame Lojas (Questão 2)**"""

df_lojas = df_lojas.rename(columns={'Loja':'cod_loja','Loja.1':'loja','codloja':'cod_loja','EAN':'cod_produto','Valor Unitário Sem Imposto':'valor_unitario_sem_impo','Impostos':'impostos','Dinheiro de Volta (Aplicado direto no total)':'cash_back_instantaneo'})
df_lojas.head(3)

"""## 4.2 Verificano Tipo de Colunas"""

df_vendedores.dtypes

df_lojas.dtypes

"""## 4.3 Tratando linhas

### **Data Frame Vendedores - Substituindo 'Manicor é' por Manicore na coluna filial**
"""

df_vendedores['filial'] = df_vendedores['filial'].str.replace('Loja Manicor é','Loja Manicore')
df_vendedores.sort_values(['cpf_na_nota'] ,ascending = [True]).head(2)

"""### **Data Frame Vendedores - Substituindo 'Na~o' por 'N'e 'Sim' por 'S' na coluna cpf_na_nota**"""

df_vendedores['cpf_na_nota'] = df_vendedores['cpf_na_nota'].str.replace('Na~o','NAO')
df_vendedores['cpf_na_nota'] = df_vendedores['cpf_na_nota'].str.replace('Sim','SIM')
df_vendedores.sort_values(['cpf_na_nota'] ,ascending = [True]).head(2)

"""### **Data Frame Vendedores - Arredondando colunas 'valor_compra' e 'imposto'**"""

df_imposto = df_vendedores.copy()   #Pegamos uma instancia desse df pois notou-se que com as casas decimais mantidas
# a porcentagem do imposto se mantem constante e igual a 4,5%
df_vendedores[['valor_compra','imposto']]  = df_vendedores[['valor_compra','imposto']].round(2)
df_vendedores.sort_values(['cpf_na_nota'] ,ascending = [True]).head(2)

"""# **5.0 EXTRAINDO INFORMAÇÕES BASE 1**

## 5.1 Quantidade de Vendas por Vendedores (TODAS AS UNIDADES)
"""

df_vendedores_qtd = df_vendedores.groupby(['usuario','nome']).agg({'valor_compra':'sum','num_compra':'count' }).reset_index(drop = False)
df_vendedores_qtd = df_vendedores_qtd.rename(columns={'num_compra':'qtd_vendas','valor_compra':'total_compras'})
df_vendedores_qtd['valor_medio_por_venda'] = (df_vendedores_qtd['total_compras']/df_vendedores_qtd['qtd_vendas']).round(2)
df_vendedores_qtd['percentual_tot_compras'] = ((df_vendedores_qtd['total_compras']/df_vendedores_qtd['total_compras'].sum()).round(4))*100
df_vendedores_qtd['percentual_qtd_vendas'] = ((df_vendedores_qtd['qtd_vendas']/df_vendedores_qtd['qtd_vendas'].sum()).round(4))*100
df_vendedores_qtd = df_vendedores_qtd.sort_values(['qtd_vendas'] ,ascending = [False]).reset_index(drop = True)
df_vendedores_qtd

histograma_simples(df_vendedores_qtd,'qtd_vendas',17,23,passo=1,title='Distribuição Quantidade de vendedores por quantidde de Vendas',xlabel="Quantidade de Vendas",ylabel ='Quantidade de Vendedores',path='histograma_qtd_vendas_vendedores')

"""### **TOP 10 por quantidade de vendas**"""

df_vendedores_qtd.head(10)

"""### **TOP 10 por valor total de vendas**"""

df_vendedores_qtd.sort_values(['total_compras'] ,ascending = [False]).reset_index(drop = True).head(10)

histograma_simples(df_vendedores_qtd,'total_compras',0,31000,passo=5000,title='Distribuição Valor total de vendas por vendedores',xlabel="Valor total de vendas",ylabel ='Quantidade de Vendedores',path='histograma_total_vendas_vendedores')

"""### **TOP 10 por valor medio por venda**"""

df_vendedores_qtd.sort_values(['valor_medio_por_venda'] ,ascending = [False]).reset_index(drop = True).head(10)

"""### **PRINTS**"""

#Informações do vendedor que mais vendeu
vendedor_mais_vendas = df_vendedores_qtd.iloc[0]['nome']
vendedor_mais_vendas_cod = df_vendedores_qtd.iloc[0]['usuario']
qtd_vendas_vendedor = df_vendedores_qtd.iloc[0]['qtd_vendas']

# Informações do vendedor com maior valor total de vendas
vendedor_maior_total = df_vendedores_qtd.sort_values(['total_compras'] ,ascending = [False]).reset_index(drop = True).iloc[0]['nome']
vendedor_maior_total_cod = df_vendedores_qtd.sort_values(['total_compras'] ,ascending = [False]).reset_index(drop = True).iloc[0]['usuario']
total_vendas_vendedor = df_vendedores_qtd.sort_values(['total_compras'] ,ascending = [False]).reset_index(drop = True).iloc[0]['total_compras'].round(2)

# Informações do vendedor com maior valor médio de vendas
vendedor_maior_media = df_vendedores_qtd.sort_values(['valor_medio_por_venda'] ,ascending = [False]).reset_index(drop = True).iloc[0]['nome']
vendedor_maior_media_cod = df_vendedores_qtd.sort_values(['valor_medio_por_venda'] ,ascending = [False]).reset_index(drop = True).iloc[0]['usuario']
media_vendas_vendedor = df_vendedores_qtd.sort_values(['valor_medio_por_venda'] ,ascending = [False]).reset_index(drop = True).iloc[0]['valor_medio_por_venda'].round(2)

# Informações Médias Gerais 
valor_medio_vendas_vendedor = (df_vendedores_qtd['total_compras'].sum()/df_vendedores_qtd['qtd_vendas'].count()).round(2)
valor_medio_vendas_por_venda = (df_vendedores_qtd['total_compras'].sum()/df_vendedores_qtd['qtd_vendas'].sum()).round(2)
qtd_media_vendas = int((df_vendedores_qtd['qtd_vendas'].sum()/df_vendedores_qtd['qtd_vendas'].count()).round(0))

print(f"Quantidade Média de Vendas por vendedor: {qtd_media_vendas} vendas")
print(f"Valor Médio Total por vendedor: R${valor_medio_vendas_vendedor}")
print(f"Valor Médio Total por venda: R${valor_medio_vendas_por_venda}")
print(f"Vendedor com mais vendas em todas as unidades: {vendedor_mais_vendas} - código do usário: {vendedor_mais_vendas_cod} - quantidade de vendas: {qtd_vendas_vendedor} -> {((qtd_vendas_vendedor/qtd_media_vendas)-1)*100:.2f}% acima da média")
print(f"Vendedor com maior total de vendas em todas as unidades: {vendedor_maior_total} - código do usário: {vendedor_maior_total_cod} - total de vendas: R${total_vendas_vendedor} -> {((total_vendas_vendedor/valor_medio_vendas_vendedor)-1)*100:.2f}% acima da média")
print(f"Vendedor com maior valor médio por venda em todas as unidades: {vendedor_maior_media} - código do usário: {vendedor_maior_media_cod} - valor médio de vendas: R${media_vendas_vendedor} -> {((media_vendas_vendedor/valor_medio_vendas_por_venda)-1)*100:.2f}% acima da média")

"""## 5.2 Quantidade de Vendas por Vendedores (POR UNIDADE)"""

#Criando a tabela que será utilizada para encontrar o vendedor que mais vendeu por filial
df_qtd_v_vendedores = df_vendedores.copy()
df_qtd_v_vendedores = df_qtd_v_vendedores.drop(['num_compra','cpf_na_nota',"tipo_de_mercadoria","data_compra"], axis = 'columns')
df_qtd_v_vendedores = df_qtd_v_vendedores.groupby(['filial','usuario','nome']).agg({'imposto':'count','valor_compra':'sum'}).reset_index(drop = False)
df_qtd_v_vendedores = df_qtd_v_vendedores.rename(columns={'imposto':'qtd_vendas'})
df_qtd_v_vendedores = df_qtd_v_vendedores.rename(columns={'valor_compra':'valor_total_vendas'})
df_qtd_v_vendedores = df_qtd_v_vendedores.sort_values(['qtd_vendas'] ,ascending = [False]).reset_index(drop = True)
df_qtd_v_vendedores

"""### **UTILIZANDO FUNÇÃO VP_FILIAL**"""

# Cria uma lista agrupada por filial
filiais = df_vendedores.groupby(['filial']).count().reset_index(drop = False).copy()
filiais = filiais['filial'].tolist()

# Transforma a tabela criada por agrupamento, em uma lista
list_qtd_v_vendedores = df_qtd_v_vendedores
list_qtd_v_vendedores = list_qtd_v_vendedores.values.tolist()

todas_filiais_v = vp_filial(filiais,list_qtd_v_vendedores,3)
# Separando em listas as filiais, qtd_vendas e os vendedores que mais venderam por filial
filiais_v = []
qtd_vendas_v = []
vendedor = []
cod_vendedor=[]
for idx, key in enumerate(todas_filiais_v):
  filiais_v.append(key)
  qtd_vendas_v.append(todas_filiais_v[key][0])
  vendedor.append(todas_filiais_v[key][1])
  cod_vendedor.append(todas_filiais_v[key][2])

#cria a figura e o eixo
fig = plt.figure(figsize=(8,7))
ax1 = fig.add_subplot(111)

#colores
cores = [ '#01a0e4','#d52d2b','#393ed3', '#6075b7','#2a2b60','gray','pink','brown']

#plotando o gráfico
for n in range(len(vendedor)):
  ax1.bar(filiais_v[n],qtd_vendas_v[n], color = cores[n], label=f'{vendedor[n]} - COD:{cod_vendedor[n]}' )

# Adicionando legendas as barras
plt.xlabel('Filial', fontsize=15)
plt.ylabel('Quantidade de vendas', fontsize=15)

#legenda em posicao especifica
plt.legend(bbox_to_anchor=(1.20,0.5), loc="lower right", bbox_transform=fig.transFigure)

#Fonte dos eixos
plt.rcParams['xtick.labelsize'] = 12
plt.rcParams['ytick.labelsize'] = 12

#Adicionando texto dentro do gráfico
for n in range(len(vendedor)):
  if n == len(vendedor)-1:
      plt.text(n-0.42, 6, f'{vendedor[n]} - COD:{cod_vendedor[n]}\n{" "*10}{qtd_vendas_v[n]} vendas', bbox=dict(facecolor='white', alpha=0.5))
  else:
     plt.text(n-0.35, 6, f'{vendedor[n]} - COD:{cod_vendedor[n]}\n{" "*10}{qtd_vendas_v[n]} vendas', bbox=dict(facecolor='white', alpha=0.5))

#Titulo
title = 'Vendedores com maior número de vendas por filial'
plt.title(title,fontsize=18)

plt.savefig('imagens/dados1/'+title +'.png')
plt.show()

todas_filiais_v = vp_filial(filiais,list_qtd_v_vendedores,4)
# Separando em listas as filiais, qtd_vendas e os vendedores que mais venderam por filial
filiais_v = []
qtd_vendas_v = []
vendedor = []
cod_vendedor=[]
for idx, key in enumerate(todas_filiais_v):
  filiais_v.append(key)
  qtd_vendas_v.append(todas_filiais_v[key][0])
  vendedor.append(todas_filiais_v[key][1])
  cod_vendedor.append(todas_filiais_v[key][2])

#cria a figura e o eixo
fig = plt.figure(figsize=(8,7))
ax1 = fig.add_subplot(111)

#colores
cores = [ '#01a0e4','#d52d2b','#393ed3', '#6075b7','#2a2b60','gray','pink','brown']

#plotando o gráfico
for n in range(len(vendedor)):
  ax1.bar(filiais_v[n],qtd_vendas_v[n], color = cores[n], label=f'{vendedor[n]} - COD:{cod_vendedor[n]}' )

# Adicionando legendas as barras
plt.xlabel('Filial', fontsize=15)
plt.ylabel('Quantidade de vendas', fontsize=15)

#legenda em posicao especifica
plt.legend(bbox_to_anchor=(1.20,0.5), loc="lower right", bbox_transform=fig.transFigure)

#Fonte dos eixos
plt.rcParams['xtick.labelsize'] = 12
plt.rcParams['ytick.labelsize'] = 12

#Adicionando texto dentro do gráfico
for n in range(len(vendedor)):
  if n == len(vendedor)-1:
      plt.text(n-0.38, 2500, f'{vendedor[n]} - COD:{cod_vendedor[n]}\n{" "*10}R${qtd_vendas_v[n]:.2f}', bbox=dict(facecolor='white', alpha=0.5))
  else:
     plt.text(n-0.4, 2500, f'{vendedor[n]} - COD:{cod_vendedor[n]}\n{" "*10}R${qtd_vendas_v[n]:.2f}', bbox=dict(facecolor='white', alpha=0.5))

#Titulo
title = 'Vendedores com maior valor de venda por filial'
plt.title(title,fontsize=18)

plt.savefig('imagens/dados1/'+title +'.png')
plt.show()

"""## 5.3 Percentual (%) de CPF na nota fiscal

### **% de CPF's em todas as Vendas**
"""

df_cpf_nota = df_vendedores.groupby(['cpf_na_nota']).agg({'nome':'count' }).reset_index(drop = False).copy()
df_cpf_nota = df_cpf_nota = df_cpf_nota.rename(columns={'nome':'n_ocorrencias'})

df_cpf_nota['percentual'] = (df_cpf_nota['n_ocorrencias']/df_cpf_nota['n_ocorrencias'].sum()).round(4)*100
df_cpf_nota = df_cpf_nota.sort_values(['n_ocorrencias'] ,ascending = [False]).reset_index(drop = True)
df_cpf_nota

grafico_pizza(df_cpf_nota,'n_ocorrencias','cpf_na_nota',title="Notas Fiscais Geral com e sem CPF",x=1, explode=[0.09,0.07])

"""### **% de CPF's por Vendedor**"""

def definir_status_cpf(cpf,status):
  if (cpf == status):
    return 1
  else:
    return 0

df_cpf_vendedor = df_vendedores.copy()
df_cpf_vendedor['cpf_sim'] = df_cpf_vendedor.apply(lambda row: definir_status_cpf(row['cpf_na_nota'],'SIM'), axis = 'columns')
df_cpf_vendedor['cpf_nao'] = df_cpf_vendedor.apply(lambda row: definir_status_cpf(row['cpf_na_nota'],'NAO'), axis = 'columns')
df_cpf_vendedor = df_cpf_vendedor.groupby(['usuario','nome']).agg({'cpf_sim':'sum','cpf_nao':'sum'}).reset_index(drop = False)
df_cpf_vendedor['percentual_cpf_sim'] = (df_cpf_vendedor['cpf_sim'] *100 /(df_cpf_vendedor['cpf_sim'] + df_cpf_vendedor['cpf_nao'])).round(2)
df_cpf_vendedor = df_cpf_vendedor.sort_values(['cpf_sim'] ,ascending = [False]).reset_index(drop = True)
df_cpf_vendedor

df_cpf_vendedor.sort_values(['percentual_cpf_sim'] ,ascending = [False])

"""### **HISTOGRAMA - DISTRIBUIÇÃO DE PERCENTUAL DE CPF'S ACEITOS POR VENDEDOR**"""

cpf_sim = df_cpf_vendedor['percentual_cpf_sim']
plt.figure(figsize=(8, 7))
plt.hist(cpf_sim, bins=range(70, 100,5))
plt.title('Distribuição de CPFs em notas ficais')
plt.xlabel("percentual de cpf's nas notas (%)")
plt.ylabel('vendedores')
plt.savefig('imagens/dados1/histograma-cpfs-positivos-vendedor.png')
plt.plot()

"""### ****% de CPF's por Filial****"""

df_cpf_filial = df_vendedores.copy()
df_cpf_filial['cpf_sim'] = df_cpf_filial.apply(lambda row: definir_status_cpf(row['cpf_na_nota'],'SIM'), axis = 'columns')
df_cpf_filial['cpf_nao'] = df_cpf_filial.apply(lambda row: definir_status_cpf(row['cpf_na_nota'],'NAO'), axis = 'columns')
df_cpf_filial = df_cpf_filial.groupby(['filial']).agg({'cpf_sim':'sum','cpf_nao':'sum'}).reset_index(drop = False)
df_cpf_filial['percentual_cpf_sim'] = (df_cpf_filial['cpf_sim'] *100 /(df_cpf_filial['cpf_sim'] + df_cpf_filial['cpf_nao'])).round(2)
df_cpf_filial['cpf_sim_relacao_total'] = (df_cpf_filial['cpf_sim'] *100 /(df_cpf_filial['cpf_sim'].sum())).round(2)
df_cpf_filial = df_cpf_filial.sort_values(['cpf_sim'] ,ascending = [True]).reset_index(drop = True)
df_cpf_filial

grafico_barras_empilhadas(df_cpf_filial, 'cpf_sim', 'cpf_nao', 'filial',legenda=['Com CPF','Sem CPF'],nome_eixo_x='Filial',nome_eixo_y='Qtd Cpf',title='CPF por filial')

grafico_pizza(df_cpf_filial,'cpf_sim','filial',title="Percentural de Notas com CPF entre as filiais ",x=2, explode=[0.09,0.07,0.07])

"""## 5.4 Porcentagem de imposto sobre produto"""

df_imposto['por_imposto'] = (df_imposto['imposto']*100/df_imposto['valor_compra']).round(3)
df_imposto = df_imposto.sort_values(['por_imposto'] ,ascending = [False]).reset_index(drop = True)
df_imposto.head(5) # Note que a % de imposto é igual para todas as linhas tanto no inicio do Df 
df_imposto.tail(5) # quanto no fim do Df

"""### **Para comprovar por meio de cálculos executamos o código abaixo:**"""

media_imposto = df_imposto['por_imposto'].sum()/df_imposto['por_imposto'].count()
print(f'Média de Imposto de todas as vendas: {media_imposto}%')

"""**Produtos com maiores impostos em valor absoluto:**
### Porém podemos encontrar o produto com maior valor absoluto de imposto.
"""

maiores_impostos = df_imposto.sort_values(['imposto'] ,ascending = [False]).reset_index(drop = True).round(2)
maiores_impostos

print(f'Valor do produto com maior imposto(valor absoluto): R${df_imposto["imposto"].max():.2f}')
print(f'Valor do produto com menor imposto(valor absoluto): R${df_imposto["imposto"].min():.2f}')

"""## 5.5 Valor Máximo e Mínimo de Produtos com mesmo Nome"""

df_min = df_vendedores.copy()
df_max = df_vendedores.copy()
df_min = df_min.groupby(['tipo_de_mercadoria']).agg({'valor_compra':'min'}).reset_index(drop = False)
df_max = df_max.groupby(['tipo_de_mercadoria']).agg({'valor_compra':'max'}).reset_index(drop = False)

df_maxmin = pd.merge(df_min, df_max, on =['tipo_de_mercadoria'], how = 'left' ).copy()

df_max_min_prod = pd.merge(df_vendedores, df_min, on =['tipo_de_mercadoria'], how = 'left' )
df_max_min_prod = pd.merge(df_max_min_prod, df_max, on =['tipo_de_mercadoria'], how = 'left' )
df_max_min_prod = df_max_min_prod.rename(columns={'valor_compra_x':'valor_compra','valor_compra_y':'valor_min_compra','valor_compra':'valor_max_compra'})
df_max_min_prod['amplitude']=df_max_min_prod['valor_max_compra'] - df_max_min_prod['valor_min_compra']
df_max_min_prod = df_max_min_prod.sort_values(['amplitude'] ,ascending = [False])
df_max_min_prod

df_maxmin = df_maxmin.rename(columns={'valor_compra_x':'valor_min_compra','valor_compra_y':'valor_max_compra'})
df_maxmin['amplitude']=df_maxmin['valor_max_compra'] - df_maxmin['valor_min_compra']
df_maxmin = df_maxmin.sort_values(['amplitude'] ,ascending = [False])
df_maxmin.reset_index(drop = True)

"""## 5.6 Produtos Mais Vendidos"""

df_produto =  df_vendedores.copy()
df_produto = df_produto.groupby(['tipo_de_mercadoria']).agg({'valor_compra':'sum','imposto':'count'}).reset_index(drop = False)
df_produto = df_produto.rename(columns={'imposto':'qtd_vendas'})
df_produto = df_produto.rename(columns={'valor_compra':'valor_total'})
df_produto['porcentagem_vendas_tot'] = (df_produto['qtd_vendas']*100/df_produto['qtd_vendas'].sum()).round(2)
df_produto = df_produto.sort_values(['qtd_vendas'] ,ascending = [False]).reset_index(drop = True)
df_produto

"""### **PRINTS**"""

def maior_produto(produtos):
  maiores = []
  maior_prod = {}
  for linha in produtos:
    if 'maior' in locals():
      if linha[2] > maior:
        maior = linha[2]
    else:
      maior = linha[2]
  # criando lista com os maiores valores    
  for linha in produtos:
    if linha[2] == maior:
      maiores.append(linha[0])
  maior_prod[maior] = maiores
  return maior_prod

maior_prod = maior_produto(df_produto.values.tolist())
for idx, key in enumerate(maior_prod) :
  print(f'Quantidade de Vendas dos produtos mais vendidos: {key} vendas')
  print('Produtos mais vendidos:', end=" ")
  for i in range(len(maior_prod[key])):
    if i < len(maior_prod[key]) -1:
      print(maior_prod[key][i], end=", ")
    else:
      print(maior_prod[key][i])

# Definindo os produtos, que vao para o eixo x:
produtos = df_produto['tipo_de_mercadoria'].head(5)
produtos = produtos.tolist()

# Definindo as participações que formarão o eixo y:
quantidade = df_produto['qtd_vendas'].head(5)
quantidade = quantidade.tolist()


#cria a figura e o eixo
fig = plt.figure(figsize=(8,7))
ax1 = fig.add_subplot(111)

#colores
cores = [ '#01a0e4','#d52d2b','#393ed3', '#6075b7','#2a2b60','gray','pink','brown']

#plotando o gráfico
ax1.barh(produtos,quantidade, color = cores)

# Adicionando legendas as barras
plt.xlabel('Quantidade', fontsize=12)
plt.ylabel('Produtos mais vendidos', fontsize=12)


#Fonte dos eixos
plt.rcParams['xtick.labelsize'] = 12
plt.rcParams['ytick.labelsize'] = 12

#Titulo
title = '5 Produtos mais vendidos em todas as unidades'
plt.title(title,fontsize=18)

plt.savefig('imagens/dados1/'+title +'.png')
plt.show()

"""## 5.7 Produtos mais Vendidos por Vendedor"""

df_prod_vendedor = df_vendedores.copy()
df_prod_vendedor = df_prod_vendedor.drop(['num_compra','cpf_na_nota','imposto',"filial","data_compra"], axis = 'columns')
df_prod_vendedor = df_prod_vendedor.groupby(['usuario','nome','tipo_de_mercadoria']).agg({'valor_compra':'count'}).reset_index(drop = False)
df_prod_vendedor = df_prod_vendedor.rename(columns={'valor_compra':'qtd_vendas'})
df_prod_vendedor = df_prod_vendedor.sort_values(['qtd_vendas'] ,ascending = [False]).reset_index(drop = True)
df_prod_vendedor.head(10)

"""## 5.8 Produtos mais vendidos por Filial"""

df_prod_filial = df_vendedores.copy()
df_prod_filial = df_prod_filial.drop(['num_compra','cpf_na_nota','imposto',"usuario","nome","data_compra"], axis = 'columns')
df_prod_filial = df_prod_filial.groupby(['filial','tipo_de_mercadoria']).agg({'valor_compra':'count'}).reset_index(drop = False)
df_prod_filial = df_prod_filial.rename(columns={'valor_compra':'qtd_vendas'})
df_prod_filial = df_prod_filial.sort_values(['qtd_vendas'] ,ascending = [False]).reset_index(drop = True)
df_prod_filial2 = df_prod_filial.copy()
df_prod_filial

filiais = df_vendedores.groupby(['filial']).count().reset_index(drop = False).copy()
filiais = filiais['filial'].tolist()

df_prod_filial = df_prod_filial.values.tolist()
list_produto_filial = []
todas_filiais = {}
for filial in filiais:
  for linha in df_prod_filial:
    if linha[0] == filial:
      if 'maior' in locals():
        if linha[2] > maior:
          maior = linha[2]
          produto = linha[1]
      else:
        maior = linha[2]
        produto = linha[1]
  todas_filiais[filial] = [maior,produto]
  maior = 0
# Separando em listas as filiais, qtd_vendas e os produtos mais vendidos por filial
filiais = []
qtd_vendas = []
produto = []
for idx, key in enumerate(todas_filiais):
  filiais.append(key)
  qtd_vendas.append(todas_filiais[key][0])
  produto.append(todas_filiais[key][1])

# Definindo os produtos, que vao para o eixo x:
produtos = filiais

# Definindo as participações que formarão o eixo y:
quantidade = qtd_vendas

#cria a figura e o eixo
fig = plt.figure(figsize=(8,7))
ax1 = fig.add_subplot(111)

#colores
cores = [ '#01a0e4','#d52d2b','#393ed3', '#6075b7','#2a2b60','gray','pink','brown']

#plotando o gráfico
for n in range(len(produtos)):
  ax1.bar(produtos[n],quantidade[n], color = cores[n], label=produto[n] )

# Adicionando legendas as barras
plt.xlabel('Filial', fontsize=15)
plt.ylabel('Quantidade de vendas', fontsize=15)

#legenda em posicao especifica
plt.legend(bbox_to_anchor=(1.18,0.5), loc="lower right", bbox_transform=fig.transFigure)

#Fonte dos eixos
plt.rcParams['xtick.labelsize'] = 12
plt.rcParams['ytick.labelsize'] = 12

#Adicionando texto dentro do gráfico
for n in range(len(produto)):
  plt.text(n-0.36, 15, f'{produto[n]}\n{" "*10}{quantidade[n]} vendas', bbox=dict(facecolor='white', alpha=0.5))

#Titulo
title = 'Produtos mais vendidos por unidade'
plt.title(title,fontsize=18)

plt.savefig('imagens/dados1/'+title +'.png')
plt.show()

"""# **6.0 EXTRAINDO INFORMAÇÕES BASE 2**

# 6.1 Porcentagem de Imposto por Compra
"""

df_pip = df_lojas.drop(['cod_loja',"inicio","termino","data_compra","cod_produto"], axis = 'columns').copy()
df_pip['porcent_imp'] = ((df_pip['impostos']/df_pip['quantidade'])*100/(df_pip['valor_unitario_sem_impo'] + (df_pip['impostos']/df_pip['quantidade']))).round(2)
df_pip.head(5) # Note que mais uma vez o imposto é constante para todos os produtos
df_pip.tail(3) # Logo não haveria necessidade de calcular um imposto geral ou por tipo de produto, sempre será 11,15%
df_pip['total_sem_imposto'] = df_pip['valor_unitario_sem_impo']*df_pip['quantidade']
df_pip.head(3)

valor_total = df_pip['total_sem_imposto'].sum() 
impostos = df_pip['impostos'].sum().copy()
cash_back_instantaneo = df_pip['cash_back_instantaneo'].sum().copy()
ocorrencia = [valor_total,impostos,cash_back_instantaneo]
labels = []
# Adquirindo nome das coluns da tabela anterior
for n in range(len(df_pip.columns)):
  if n == 2 or n == 5 or n == 6:
      labels.append(df_pip.columns[n])
# Arrumando os nomes:



title= "Composição do valor dos produtos em percentual "

fig = plt.figure(figsize=(8,7))
ax1 = fig.add_subplot(111)
   
cores = [ '#01a0e4','#d52d2b','#393ed3', 'yellow','black','gray','pink','brown']

plt.pie(ocorrencia, explode=[0,0,0], labels=labels, colors=cores, autopct='%1.1f%%', shadow=True, startangle=90)

# Com essa opção o gráfico ficará em círculo
plt.axis('equal') 

# Cria um título para o gráfico
ax1.set_title(title, fontsize=18) 

#legenda em posicao especifica
ax1.legend(bbox_to_anchor=(1,0), loc="lower right", bbox_transform=fig.transFigure)

#Fonte dos eixos
plt.rcParams['xtick.labelsize'] = 12
plt.rcParams['ytick.labelsize'] = 12
#plt.rcParams['legend.fontsize'] = 12

# Salvar grafico como imagem
plt.savefig('imagens/dados2/'+title +'.png')

#Monstra o gráfico
plt.show()

"""# 6.2 Unidade que mais vendeu"""

df_pip2 = df_pip.groupby(['loja']).agg({'total_sem_imposto':'sum','impostos':'sum','cash_back_instantaneo':'sum','quantidade':'sum'}).copy()
df_pip2 = df_pip2.sort_values(['total_sem_imposto'] ,ascending = [False]).reset_index(drop = False).round(2).copy()
df_pip2['valor_final'] = df_pip2['total_sem_imposto'] + df_pip2['impostos'] - df_pip2['cash_back_instantaneo']
df_pip2

def grafico_barras(df, coluna1, coluna2,coluna3,coluna4, nome_dados, legenda=[1,2],nome_eixo_x='eixo x',nome_eixo_y='eixo y',title='titulo'):
  x1 = []
  x2 = []
  x3 = []
  x4 = []
  x5 = []
  a = []
  for i in df.index: 
      if i > 5:
        break
      else:
        #cria os dados
        x1.append(df[coluna1][i])
        x2.append(df[coluna2][i])
        x4.append(df[coluna3][i])
        x3.append(df[nome_dados][i])
        x5.append(df[coluna4][i])
        a.append(df[coluna1][i]/(df[coluna1][i] + df[coluna2][i]) )

  #Define a Largura das barras
  barWidth = 0.25
      
  #cria a figura e o eixo
  fig = plt.figure(figsize=(8,7))
  ax1 = fig.add_subplot(111)

  #Definindo a posição das barras
  r1 = np.arange(len(x1))
  r2 = [x + barWidth for x in r1]
  r3 = [x + barWidth for x in r2]

  #Criando as barras
  plt.bar(r1, x1, color='#01a0e4', width=barWidth, label= legenda[0])
  plt.bar(r2, x2, color='#d52d2b', width=barWidth, label=legenda[1])
  plt.bar(r3, x4, color='#393ed3', width=barWidth, label=legenda[2])


  # Adicionando legendas as barras
  plt.xlabel(nome_eixo_x, fontsize=15)
  plt.xticks([r + barWidth for r in range(len(x1))],x3)
  plt.ylabel(nome_eixo_y, fontsize=15)
  plt.title(title,fontsize=15)

  #legenda em posicao especifica
  ax1.legend(bbox_to_anchor=(1.18,0.5), loc="lower right", bbox_transform=fig.transFigure)

  #Fonte dos eixos
  plt.rcParams['xtick.labelsize'] = 16
  plt.rcParams['ytick.labelsize'] = 16
  #plt.rcParams['legend.fontsize'] = 16

  #Adicionando texto dentro do gráfico
  for n in range(len(x3)):
    plt.text(n+0.15, 1300000, f'{legenda[0]}:\n{" "*5}R${x1[n]:.2f}\n{" "*5}{x5[n]} vendas', bbox=dict(facecolor='white', alpha=0.5))
    plt.text(n+0.1, 300000, f'{legenda[1]}:\n{" "*5}R${x2[n]:.2f}', bbox=dict(facecolor='white', alpha=0.5))
    plt.text(n+0.4, 100000, f'{legenda[2]}:\n{" "*5}R${x4[n]:.2f}', bbox=dict(facecolor='white', alpha=0.5))

  # Salvar grafico como imagem
  plt.savefig('imagens/dados2/'+title +'.png')

  plt.show()

grafico_barras(df_pip2, 'total_sem_imposto', 'impostos','cash_back_instantaneo','quantidade', 'loja',legenda=['Valor sem Imposto','Imposto','Desconto'],nome_eixo_x='Unidade',nome_eixo_y='R$',title='Composição total de Vendas por Loja')

grafico_pizza(df_pip2,'valor_final','loja',title="Porcentagem de Valor de Vendas",x=1, explode=[0,0.1],diretorio='dados2')

grafico_pizza(df_pip2,'quantidade','loja',title="Porcentagem de Quantidade de Vendas",x=1, explode=[0,0.1],diretorio='dados2')

"""# 6.3 Produto Mais Vendido

"""

df_pip3 = df_pip.groupby(['loja','produto']).agg({'quantidade':'sum'}).copy()
df_pip3 = df_pip3.reset_index(drop=False)
df_pip3

def inserir_col(produto,coluna):
  if produto == coluna:
    return 1
  else:
    return 0
df_pip3['smart_med'] = df_pip3.apply(lambda row: inserir_col(row['produto'],"Smart Med"), axis = 'columns').copy()
df_pip3['smart_pro'] = df_pip3.apply(lambda row: inserir_col(row['produto'],"Smart Pro"), axis = 'columns').copy()

df_pip3['smart_med'] = df_pip3['smart_med']*df_pip3['quantidade']
df_pip3['smart_pro'] = df_pip3['smart_pro']*df_pip3['quantidade']
df_pip3 = df_pip3.drop(['produto','quantidade'], axis = 'columns').copy()
df_prod1 = df_pip3.groupby(['loja']).agg({'smart_med':'sum'}).copy()
df_prod2 = df_pip3.groupby(['loja']).agg({'smart_pro':'sum'}).copy()
df_prod12 = pd.merge(df_prod1, df_prod2, on =['loja'], how = 'left' ).reset_index(drop=False)
df_prod12

def grafico_barras2(df, coluna1, coluna2,nome_dados, legenda=[1,2],nome_eixo_x='eixo x',nome_eixo_y='eixo y',title='titulo'):

  x1 = []
  x2 = []
  x3 = []

  for i in df.index: 
      if i > 5:
        break
      else:
        #cria os dados
        x1.append(df[coluna1][i])
        x2.append(df[coluna2][i])
        x3.append(df[nome_dados][i])
  
  #Define a Largura das barras
  barWidth = 0.25
      
  #cria a figura e o eixo
  fig = plt.figure(figsize=(8,7))
  ax1 = fig.add_subplot(111)

  #Definindo a posição das barras
  r1 = np.arange(len(x1))
  r2 = [x + barWidth for x in r1]
 

  #Criando as barras
  plt.bar(r1, x1, color='#01a0e4', width=barWidth, label= legenda[0])
  plt.bar(r2, x2, color='#d52d2b', width=barWidth, label=legenda[1])



  # Adicionando legendas as barras
  plt.xlabel(nome_eixo_x, fontsize=15)
  plt.xticks([r + barWidth for r in range(len(x1))],x3)
  plt.ylabel(nome_eixo_y, fontsize=15)
  plt.title(title,fontsize=15)

  #legenda em posicao especifica
  ax1.legend(bbox_to_anchor=(1.1,0.5), loc="lower right", bbox_transform=fig.transFigure)

  #Fonte dos eixos
  plt.rcParams['xtick.labelsize'] = 16
  plt.rcParams['ytick.labelsize'] = 16
  #plt.rcParams['legend.fontsize'] = 16

  #Adicionando texto dentro do gráfico
  for n in range(len(x3)):
    plt.text(n-0.15, 100, f'{legenda[0]}:\n{" "*5}{x1[n]} vendas', bbox=dict(facecolor='white', alpha=0.5))
    plt.text(n+0.12, 250, f'{legenda[1]}:\n{" "*5}{x2[n]} vendas', bbox=dict(facecolor='white', alpha=0.5))
  plt.text(n-0.4, 350, f'Smart Pro: {x2[0]+x2[1]} vendas\nSmart Med: {x1[0]+x1[1]} vendas', bbox=dict(facecolor='white', alpha=0.5))

  # Salvar grafico como imagem
  plt.savefig('imagens/dados2/'+title +'.png')

  plt.show()

grafico_barras2(df_prod12, 'smart_med', 'smart_pro', 'loja',legenda =['Smart Med','Smart Pro'],nome_eixo_x='Loja',nome_eixo_y='Quantidade de Vendas',title='Quantidade de Venda de Produtos por Loja')

grafico_pizza(df_prod12,'smart_med','loja',title="Porcentagem de Smart Med por Loja",x=1, explode=[0,0.1],diretorio='dados2')

grafico_pizza(df_prod12,'smart_pro','loja',title="Porcentagem de Smart Pro por Loja",x=1, explode=[0,0.1],diretorio='dados2')

df_produto_m_vendido = df_pip.groupby(['produto']).agg({'quantidade':'sum'}).reset_index(drop=False).copy()
df_produto_m_vendido

grafico_pizza(df_produto_m_vendido,'quantidade','produto',title="Produto Mais Vendido",x=1, explode=[0,0.1],diretorio='dados2')

writer = pd.ExcelWriter('relatorio_base1.xlsx')
df_vendedores_qtd.to_excel(writer, 'vendedor_mais_vendas(geral)', index = False)
df_qtd_v_vendedores.to_excel(writer, 'vendedor_mais_vendas(unidade)', index = False)
df_cpf_vendedor.to_excel(writer, 'qtd_cpfs_por_vendedor', index = False)
df_cpf_filial.to_excel(writer, 'qtd_cpfs_por_filial', index = False)
df_imposto.to_excel(writer, 'imposto_por_produto', index = False)
maiores_impostos.to_excel(writer, 'maiores_impostos_valor_abs', index = False)
df_maxmin.to_excel(writer, 'valor_max_min_mesmo_produto', index = False)
df_produto.to_excel(writer, 'produtos_mais_vendidos', index = False)
df_prod_filial2.to_excel(writer, 'produtos_mais_vendidos(filial)', index = False)
writer.save()

writer = pd.ExcelWriter('relatorio_base2.xlsx')
df_pip.to_excel(writer, 'porcentagem_imposto_por_compra', index = False)
df_pip2.to_excel(writer, 'unidade_que_mais_vendeu', index = False)
df_prod12.to_excel(writer, 'produto_mais_vendido(unidade)', index = False)
writer.save()